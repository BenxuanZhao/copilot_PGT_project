package com.example.web_gptregenerate.dao;

import com.example.web_gptregenerate.domain.User;
import com.example.web_gptregenerate.domain.UserExample;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

//@Repository
@Mapper
public interface UserMapper {
    /* Here is the explanation for the code above:
1. The interface UserMapper is a Java interface which extends the generic Mapper interface. The generic Mapper interface is a MyBatis Generator artifact and is not part of the MyBatis core. It's a generic interface that MyBatis Generator creates for each table in your DB. The "genericness" of the interface comes from the fact that it works for any table without having to know anything about the structure of the table. This is because the generic Mapper interface uses a Java Generics type parameter to indicate what type of object it works with. In the case of the UserMapper, it works with User objects because the type parameter is User. In the case of the BlogMapper, it works with Blog objects because the type parameter is Blog. The type parameter is also used to determine what the primary key type is for the table. In the case of the UserMapper, the primary key type is Integer because the primary key for the User table is an integer. In the case of the BlogMapper, the primary key type is Long because the primary key for the Blog table is a long.
2. The UserMapper interface is annotated with @Mapper. This tells MyBatis to create a proxy object that implements the UserMapper interface and to make that proxy object available to Spring. You can then inject the UserMapper into any of your Spring components, and Spring will provide the proxy object that MyBatis generated.
3. The UserMapper interface extends the generic Mapper interface. This is the key to being able to use MyBatis Generator. MyBatis Generator analyzes the database and generates an implementation of the generic Mapper interface for each table in the database. That generated implementation is then used by the UserMapper interface. The UserMapper interface extends the generic Mapper interface, but it doesn't contain any methods. MyBatis Generator generates all of the methods that are in the UserMapper interface.
4. The UserMapper interface contains a method called countByExample. This method is not generated by MyBatis Generator. It is added by MyBatis Generator because the <countByExample> element is set to true. This is a convenience method that allows you to count the number of records that match the criteria specified by an example.
5. The UserMapper interface contains a method called deleteByExample. This method is not generated by MyBatis Generator. It is added by MyBatis Generator because the <deleteByExample> element is set to true. This is a convenience method that allows you to delete all of the records that match the criteria specified by an example.
6. The UserMapper interface contains a method called deleteByPrimaryKey. This method is not generated by MyBatis Generator. It is added by MyBatis Generator because the <deleteByPrimaryKey> element is set to true. This is a convenience method that allows you to delete a single record by primary key.
7. The UserMapper interface contains a method called insert. This method is not generated by MyBatis Generator. It is added by MyBatis Generator because the <insert> element is set to true. This is a convenience method that allows you to insert a single record. */
    long countByExample(UserExample example);

    int deleteByExample(UserExample example);

    int deleteByPrimaryKey(Integer id);

    int insert(User record);

    int insertSelective(User record);

    List<User> selectByExample(UserExample example);

    User selectByPrimaryKey(Integer id);

    int updateByExampleSelective(@Param("record") User record, @Param("example") UserExample example);

    int updateByExample(@Param("record") User record, @Param("example") UserExample example);

    int updateByPrimaryKeySelective(User record);

    int updateByPrimaryKey(User record);
}
